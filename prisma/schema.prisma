// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Table
model User {
  id String @id @default(uuid())
  fullName String 
  email String @unique @default("")
  userName String @unique
  password String 

  // Table Relation To Profile
  profile Profile?

  // Table Relation To Post
  thread Thread[]
  // Table Relation To Likes
  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Profile Table
model Profile {
  id String @id @default(uuid())
  avatarUrl String? 
  bannerUrl String?
  bio String? 
  // References to User
  userId String  @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

// Threads Table 
model Thread {
  id String @id @default(uuid())
  content String 
  imageContent String?

  // References to User
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Likes Table
  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Threads")
}

// Likes Table
model Like {
  id String @id @default(uuid())

  // References to User
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // References to Thread
  threadId String
  Thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@unique([userId,threadId])
  @@map("Likes")
}




// Follow  Reply 